name: CMake CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-2019

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Cache and Install Dependencies
        id: cache-and-install
        uses: actions/cache@v2
        with:
          path: |
            VULKAN_SDK
            SDL/build
            SDL/include
            vcpkg
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
            
      - name: Install Vulkan SDK
        run: |
          Write-Host "Downloading Vulkan SDK installer..."
          Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/1.3.239.0/windows/VulkanSDK-1.3.239.0-Installer.exe" -OutFile VulkanSDK.exe

          Write-Host "Starting Vulkan SDK installer..."
          $installer = Start-Process -FilePath VulkanSDK.exe -Wait -PassThru -ArgumentList @("/S");
          Write-Host "Vulkan SDK installer process ID: $($installer.Id)"

          Write-Host "Waiting for installation to complete..."
          $installer.WaitForExit();
          Write-Host "Installer process has exited with exit code: $($installer.ExitCode)"  
        if: steps.cache-and-install.outputs.cache-hit != 'true'
          
      - name: Install SDL3
        run: |
          git clone https://github.com/libsdl-org/SDL
          cd SDL && mkdir build
          cd build && cmake .. -DSDL_STATIC=ON
          cmake --build . --config Release
        if: steps.cache-and-install.outputs.cache-hit != 'true'

      - name: Install vcpkg
        env:
          VULKAN_SDK: ${{ github.workspace }}/VULKAN_SDK
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg && ./bootstrap-vcpkg.bat
          vcpkg integrate install
          vcpkg install --triplet x64-windows vulkan freetype libpng[apng] harfbuzz fmt libwebp libjpeg-turbo libpng spdlog simdjson gtest libogg ffmpeg libavif curl
        if: steps.cache-and-install.outputs.cache-hit != 'true'
          
          

      # - name: Configure and build project
      #   run: |
      #     mkdir build
      #     cd build
      #     cmake .. -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake
      #     cmake --build .

      # - name: Run tests
      #   run: |
      #     cd build
      #     ctest
